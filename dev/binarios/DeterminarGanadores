#!/usr/bin/perl

use strict;
use Env;
use Getopt::Long;
use Getopt::Long qw(GetOptionsFromString);
use List::Util qw(first);
use Data::Dumper;

my $help="";
my $grabar="";
my $ganSor="";
my $licitacion="";
my $sorteoFile="";
my $resultado="";
my %hash=();
my %temaLPadron=();
my %grupos=();
my %sorteoResponse=();
my %licitacionResponse=();
my @adjud;
my $sorteo="";
my $grupoRef="";
my @response;
my $exit="";
my $confPROCDIR="/home/nicolasdeciancio/tp-sisop/PROCDIR";
my $confMAEDIR="/home/nicolasdeciancio/tp-sisop/MAEDIR";
my $confINFODIR="/home/nicolasdeciancio/tp-sisop/INFODIR";

#configuracion para que incluya opciones de una sola letra, e ignore el case.
Getopt::Long::Configure('bundling','no_ignore_case');

verificar_variables_de_ambiente();

if (@ARGV > 0){
	while(1){
		my $llamada_valida=GetOptions('a|ayuda' => \$help ,'g' => \$grabar ,'r=s' => \$ganSor, 'exit' => \$exit , 's=s' => \$sorteo , 'grupo=s' => \$grupoRef , 'l=s' => \$licitacion , 'p=s' => \$resultado);
		
		if($llamada_valida){
			esta_corriendo();
			cargar_directorios();
			cargar_hashes();
			if ($help){
				usage();
			}

			if($ganSor){
				cargar_sorteo();
				mostrar_sorteo();
			}

			if($sorteo){
				cargar_sorteo();
				my @idFecha = split("\_", $sorteoFile);
				cargar_fecha_adj((split("\\.",@idFecha[1]))[0]);
				print "Ganadores del Sorteo @idFecha[0] de fecha @idFecha[1]\n\n";
				ganadores_sorteo();
			}

			if($licitacion){
				cargar_sorteo();
				my @idFecha = split("\_", $sorteoFile);
				cargar_fecha_adj((split("\\.",@idFecha[1]))[0]);
				print "Ganadores por Licitación @idFecha[0] de fecha @idFecha[1]\n\n";
				ganadores_sorteo();
				ganadores_licitacion();
			}

			if($resultado){
				cargar_sorteo();
				my @idFecha = split("\_", $sorteoFile);
				cargar_fecha_adj((split("\\.",@idFecha[1]))[0]);
				print "Ganadores por Grupo en el acto de adjudicación de fecha @idFecha[1], Sorteo: @idFecha[0]\n\n";
				ganadores_sorteo();
				ganadores_licitacion();
				resultado_ganadores();
			}

			if($grabar){
				my $existingdir = $confINFODIR;
				mkdir $existingdir unless -d $existingdir; # Check if dir exists. If not create it.
				opendir(INFODIR,"$existingdir") or die "No se encuentra o no se puede abrir el directorio $existingdir\n";
				my @indices=("0");
				
				my $extension=".txt";
				my $salida = "";
				if($ganSor){
					$salida = (split("\\.",$sorteoFile))[0];
				}
				if($sorteo or $licitacion or $resultado){
					my $nombreSalida = nombre_archivo_salida();
					my $fechaSalida = (split("\\.",(split("\_", $sorteoFile))[1]))[0];
					my $sorteoSalida = (split("\_", $sorteoFile))[0];
					$salida = "$sorteoSalida\_$nombreSalida\_$fechaSalida";
				}
				open my $fileHandle, ">", "$existingdir/$salida$extension" or die "Can't open '$existingdir/$salida$extension'\n";
				foreach my $registro(@response){
					print $fileHandle "$registro";
				}
				close $fileHandle;
				
				close(INFODIR);
			}

			if($exit){
				exit 0;
			}
		}
		restart();
		print "$0 ~/Command-line % ";
		my $entrada=<STDIN>;
		my @arg_arr = split (/\s/, $entrada);
		@ARGV = @arg_arr;
	}
}

#Esta funcion verifica si esta corriendo el proceso, si ya esta corriendo lo deja correr, sino no lo corre otra vez
sub esta_corriendo {
	my @processid = `pgrep DeterminarGanadores`;
	if (@processid){
		print "el proceso ya esta corriendo\n";
		exit 0;
	}else{
		print "el proceso puede correr\n";	
	}
}

sub nombre_archivo_salida{
	my @rango = split("-",$grupoRef);
	my @varios = sort(split(",",$grupoRef));
	if( $grupoRef eq "all" ){
		return "Grdxxxx-Grhyyyy";
	}else{
		my $rango = @rango;
		if( $rango == 2 ){
			return "Grd@rango[0]-Grh@rango[1]"
		}else{
			my $varios = @varios;
			if( $varios == 1 and $grupoRef ne "all" ){
				return "Grd$grupoRef-Grh$grupoRef"
			}else{
				if( $varios >= 1 and $grupoRef ne "all" ){
					return "Grd@varios[0]-Grh@varios[$varios]";
				}
			}
		}
	}
}

sub cargar_sorteo{
	my $dirname = "$confPROCDIR/sorteos";
	opendir(DIR,$dirname) or die "No se encuentra o no se puede abrir el directorio $dirname\n";
	while(my $file = readdir(DIR)){
		next if ($file =~ /^\.+$/);
		if( ($file =~ /^($ganSor)\_\d+.csv\.*/) or ($file =~ /^($sorteo)\_\d+.csv\.*/) or ($file =~ /^($licitacion)\_\d+.csv\.*/) or ($file =~ /^($resultado)\_\d+.csv\.*/) ){
			$sorteoFile = $file;
			open(my $archivo, "$dirname/$file");
			while(my $linea=<$archivo>){
				chomp($linea);
				my @fields=split(";",$linea);
				$hash{@fields[0]} = @fields[1];
			}
			close($file);
		}
	}
	close(DIR);
}

sub mostrar_sorteo{
	if($grabar){
		foreach my $sorteo(sort {$hash{$a} <=> $hash{$b} } keys %hash){
			push(@response,"Nro. de Sorteo $hash{$sorteo}, le correspondió al número de orden $sorteo\n");
		}		
	}else{
		print "Resultado general del sorteo:\n\n";
		foreach my $sorteo(sort {$hash{$a} <=> $hash{$b} } keys %hash){
			print "Nro. de Sorteo $hash{$sorteo}, le correspondió al número de orden $sorteo\n";
		}
	}
}

sub restart{
	undef(@response);
	undef(@ARGV);
	undef($help);
	undef($grabar);
	undef($ganSor);
	undef(%hash);
	undef($ganSor);
	undef($grupoRef);
	undef($sorteo);
	undef(@adjud);
	undef(%sorteoResponse);
	undef(%licitacionResponse);
	undef($licitacion);
	undef($resultado);
}

sub cargar_directorios{
	open(my $confCIPAL, "$ENV{CONFDIR}/CIPAL.cnf");
	while( my $linea = <$confCIPAL>){
		my @fields=split("=",$linea);
		if(@fields[0] eq "PROCDIR"){
			$confPROCDIR=@fields[1];
		}
		if(@fields[0] eq "MAEDIR"){
			$confMAEDIR=@fields[1];
		}
		if(@fields[0] eq "INFODIR"){
			$confINFODIR=@fields[1];
		}
	}
	close($confCIPAL);
}

sub verificar_variables_de_ambiente{
	if(!$ENV{'AMBIENTE_INICIALIZADO'}){
		print "debe realizar primero la inicializacion de ambiente\n";
		exit 0;
	}else{
		print "inicio de ejecucion";
	}
}

sub cargar_hashes{
	open(my $padron,"$confMAEDIR/temaL_padron.csv");
	open(my $grp,"$confMAEDIR/grupos.csv");
	while(my $linea=<$padron>){
		chomp($linea);
		my @fields=split(";",$linea);
		$temaLPadron{@fields[2]} = [@fields[0],@fields[1],@fields[2], @fields[3], @fields[4], @fields[5], @fields[6], @fields[7], @fields[8], @fields[9], @fields[10], @fields[11], @fields[12], @fields[13]] ;
	}
	while(my $linea=<$grp>){
		chomp($linea);
		my @fields=split(";",$linea);
		$grupos{@fields[0]} = [@fields[1],@fields[2],@fields[3],@fields[4],@fields[5],@fields[6]];
	}
	close($padron);
	close($grp);
	
}

sub cargar_fecha_adj{
	(my $fecha)=@_;
	my $archivo = "$fecha.txt";
	open(my $fechaAdj,"$confPROCDIR/validas/$archivo") or die "No se encuentra o no se puede abrir el archivo $archivo\n";
	while(my $linea=<$fechaAdj>){
		chomp($linea);
		my @fields=split(";",$linea);
		push(@adjud,[@fields]);
	}
	close($fechaAdj);
}

sub mostrar_ganadores_sorteo{
	if(!$resultado and !$licitacion ){
		foreach my $index( sort keys %sorteoResponse){
			print "Ganador por sorteo del grupo $index Nro de Orden: $sorteoResponse{$index}[0], $sorteoResponse{$index}[1] (Nro de Sorteo $sorteoResponse{$index}[2])\n";
			if($grabar){
				push(@response,"Ganador por sorteo del grupo $index Nro de Orden: $sorteoResponse{$index}[0], $sorteoResponse{$index}[1] (Nro de Sorteo $sorteoResponse{$index}[2])\n");
			}
		}
	}
}

sub ganadores_sorteo{
	my @rango = split("-",$grupoRef);
	my @varios = sort(split(",",$grupoRef));
	if( $grupoRef eq "all" ){
		foreach my $nroOrden( sort {$hash{$a} <=> $hash{$b} } keys %hash ){
			foreach my $registro(@adjud){
				if ( (@$registro[4] == $nroOrden ) and ($grupos{@$registro[3]}[0] =~ /^(ABIERTO|NUEVO)/) and ($temaLPadron{@$registro[6]}[5] != "") ){
					if( !$sorteoResponse{@$registro[3]} || $sorteoResponse{@$registro[3]}[2] > $hash{$nroOrden} ){
						$sorteoResponse{@$registro[3]} = [$nroOrden,@$registro[6],$hash{$nroOrden}];
					}
				}
			}
		}
		mostrar_ganadores_sorteo();
	}else{
		my $rango = @rango;
		if( $rango == 2 ){
			foreach my $nroOrden( sort {$hash{$a} <=> $hash{$b} } keys %hash ){
				foreach my $registro(@adjud){
					if ( @rango[0] <= @$registro[3] and @rango[1] >= @$registro[3] and (@$registro[4] == $nroOrden ) and ($grupos{@$registro[3]}[0] =~ /^(ABIERTO|NUEVO)/) and ($temaLPadron{@$registro[6]}[5] != "") ){
						if( !$sorteoResponse{@$registro[3]} || $sorteoResponse{@$registro[3]}[2] > $hash{$nroOrden} ){
							$sorteoResponse{@$registro[3]} = [$nroOrden,@$registro[6],$hash{$nroOrden}];
						}
					}
				}
			}
			mostrar_ganadores_sorteo();
		}else{
			my $varios = @varios;
			if( $varios >= 1 and $grupoRef ne "all" ){
				foreach my $grupo(@varios){
					foreach my $nroOrden( sort {$hash{$a} <=> $hash{$b} } keys %hash ){
						foreach my $registro(@adjud){
							if ( $grupo == @$registro[3] and (@$registro[4] == $nroOrden ) and ($grupos{@$registro[3]}[0] =~ /^(ABIERTO|NUEVO)/) and ($temaLPadron{@$registro[6]}[5] != "") ){
								if( !$sorteoResponse{@$registro[3]} || $sorteoResponse{@$registro[3]}[2] > $hash{$nroOrden} ){
									$sorteoResponse{@$registro[3]} = [$nroOrden,@$registro[6],$hash{$nroOrden}];
								}
							}
						}
					}
				}
				mostrar_ganadores_sorteo();
			}
		}
	}

}

sub mostrar_ganadores_licitacion{
	if(!$resultado){
		foreach my $index( sort keys %licitacionResponse){
			print "Ganador por licitación del grupo $index Nro de Orden: $licitacionResponse{$index}[0], $licitacionResponse{$index}[1] con \$$licitacionResponse{$index}[3] (Nro de Sorteo $licitacionResponse{$index}[2])\n";
			if($grabar){
				push(@response,"Ganador por licitación del grupo $index Nro de Orden: $licitacionResponse{$index}[0], $licitacionResponse{$index}[1] con \$$licitacionResponse{$index}[3] (Nro de Sorteo $licitacionResponse{$index}[2])\n");
			}
		}
	}
}

sub ganadores_licitacion{
	my @rango = split("-",$grupoRef);
	my @varios = sort(split(",",$grupoRef));
	if( $grupoRef eq "all" ){
		foreach my $nroOrden( sort {$hash{$a} <=> $hash{$b} } keys %hash ){
			foreach my $registro(@adjud){
				my $estado = $grupos{@$registro[3]}[0];
				my $participa = $temaLPadron{@$registro[6]}[5];
				my $oferta = @$registro[5];
				my $nombre = @$registro[6];
				my $nroGrupo = @$registro[3];
				if ( (@$registro[4] == $nroOrden ) and ($estado =~ /^(ABIERTO|NUEVO)/) and ($participa != "") ){
					if( !$licitacionResponse{$nroGrupo} and ( !$sorteoResponse{$nroGrupo} or $sorteoResponse{$nroGrupo}[1] ne $nombre ) ){
						$licitacionResponse{$nroGrupo} = [$nroOrden,$nombre,$hash{$nroOrden},$oferta];
					}else{
						if( $licitacionResponse{$nroGrupo} and ( $licitacionResponse{$nroGrupo}[3] < $oferta) and ($sorteoResponse{$nroGrupo}[1] ne $nombre) ){
								$licitacionResponse{$nroGrupo} = [$nroOrden,$nombre,$hash{$nroOrden},$oferta];
						}else{
							if( $licitacionResponse{$nroGrupo} and ($licitacionResponse{$nroGrupo}[3] == $oferta) and ($licitacionResponse{$nroGrupo}[2] > $hash{$nroOrden}) and ($sorteoResponse{$nroGrupo}[1] ne $nombre)){
								$licitacionResponse{$nroGrupo} = [$nroOrden,$nombre,$hash{$nroOrden},$oferta];
							}
						}
					}

				}
			}
		}
		mostrar_ganadores_licitacion();
	}else{
		my $rango = @rango;
		if( $rango == 2 ){
			foreach my $nroOrden( sort {$hash{$a} <=> $hash{$b} } keys %hash ){
				foreach my $registro(@adjud){
					my $estado = $grupos{@$registro[3]}[0];
					my $participa = $temaLPadron{@$registro[6]}[5];
					my $oferta = @$registro[5];
					my $nombre = @$registro[6];
					my $nroGrupo = @$registro[3];
					if ( @rango[0] <= @$registro[3] and @rango[1] >= @$registro[3] and (@$registro[4] == $nroOrden ) and ($grupos{@$registro[3]}[0] =~ /^(ABIERTO|NUEVO)/) and ($temaLPadron{@$registro[6]}[5] != "") ){
						if( !$licitacionResponse{$nroGrupo} and ( !$sorteoResponse{$nroGrupo} or $sorteoResponse{$nroGrupo}[1] ne $nombre ) ){
							$licitacionResponse{$nroGrupo} = [$nroOrden,$nombre,$hash{$nroOrden},$oferta];
						}else{
							if( $licitacionResponse{$nroGrupo} and ( $licitacionResponse{$nroGrupo}[3] < $oferta) and ($sorteoResponse{$nroGrupo}[1] ne $nombre) ){
									$licitacionResponse{$nroGrupo} = [$nroOrden,$nombre,$hash{$nroOrden},$oferta];
							}else{
								if( $licitacionResponse{$nroGrupo} and ($licitacionResponse{$nroGrupo}[3] == $oferta) and ($licitacionResponse{$nroGrupo}[2] > $hash{$nroOrden}) and ($sorteoResponse{$nroGrupo}[1] ne $nombre)){
									$licitacionResponse{$nroGrupo} = [$nroOrden,$nombre,$hash{$nroOrden},$oferta];
								}
							}
						}
					}
				}
			}
			mostrar_ganadores_licitacion();
		}else{
			my $varios = @varios;
			if( $varios >= 1 and $grupoRef ne "all" ){
				foreach my $grupo(@varios){
					foreach my $nroOrden( sort {$hash{$a} <=> $hash{$b} } keys %hash ){
						foreach my $registro(@adjud){
							my $estado = $grupos{@$registro[3]}[0];
							my $participa = $temaLPadron{@$registro[6]}[5];
							my $oferta = @$registro[5];
							my $nombre = @$registro[6];
							my $nroGrupo = @$registro[3];
							if ( $grupo == @$registro[3] and (@$registro[4] == $nroOrden ) and ($grupos{@$registro[3]}[0] =~ /^(ABIERTO|NUEVO)/) and ($temaLPadron{@$registro[6]}[5] != "") ){
								if( !$licitacionResponse{$nroGrupo} and ( !$sorteoResponse{$nroGrupo} or $sorteoResponse{$nroGrupo}[1] ne $nombre ) ){
									$licitacionResponse{$nroGrupo} = [$nroOrden,$nombre,$hash{$nroOrden},$oferta];
								}else{
									if( $licitacionResponse{$nroGrupo} and ( $licitacionResponse{$nroGrupo}[3] < $oferta) and ($sorteoResponse{$nroGrupo}[1] ne $nombre) ){
											$licitacionResponse{$nroGrupo} = [$nroOrden,$nombre,$hash{$nroOrden},$oferta];
									}
								}
							}
						}
					}
				}
				mostrar_ganadores_licitacion();
			}
		}
	}

}

sub resultado_ganadores{
	my @rango = split("-",$grupoRef);
	my @varios = sort(split(",",$grupoRef));
	if( $grupoRef eq "all" ){
		foreach my $nroGrupo( sort keys %grupos){
			if($sorteoResponse{$nroGrupo}){
				print "$nroGrupo\-$sorteoResponse{$nroGrupo}[0] S ($sorteoResponse{$nroGrupo}[1])\n";
				if ($grabar){
				 	push(@response,"$nroGrupo\-$sorteoResponse{$nroGrupo}[0] S ($sorteoResponse{$nroGrupo}[1])\n");
				}
			}
			if($licitacionResponse{$nroGrupo}){
				print "$nroGrupo\-$licitacionResponse{$nroGrupo}[0] L ($licitacionResponse{$nroGrupo}[1])\n";
				if ($grabar){
					push(@response,"$nroGrupo\-$sorteoResponse{$nroGrupo}[0] S ($sorteoResponse{$nroGrupo}[1])\n");
				}
			}
		}
	}else{
		my $rango = @rango;
		if( $rango == 2 ){
			foreach my $nroGrupo( sort keys %grupos){
				if ( @rango[0] <= $nroGrupo and @rango[1] >= $nroGrupo ){
					if($sorteoResponse{$nroGrupo}){
						print "$nroGrupo\-$sorteoResponse{$nroGrupo}[0] S ($sorteoResponse{$nroGrupo}[1])\n";
						if ($grabar){
							push(@response,"$nroGrupo\-$sorteoResponse{$nroGrupo}[0] S ($sorteoResponse{$nroGrupo}[1])\n");
						}
					}
					if($licitacionResponse{$nroGrupo}){
						print "$nroGrupo\-$licitacionResponse{$nroGrupo}[0] L ($licitacionResponse{$nroGrupo}[1])\n";
						if ($grabar){
							push(@response,"$nroGrupo\-$sorteoResponse{$nroGrupo}[0] S ($sorteoResponse{$nroGrupo}[1])\n");
						}
					}
				}	
				
			}
		}else{
			my $varios = @varios;
			if( $varios >= 1 and $grupoRef ne "all" ){
				foreach my $grupo(@varios){
					foreach my $nroGrupo( sort keys %grupos){
						if ( $grupo == $nroGrupo ){
							if($sorteoResponse{$nroGrupo}){
								print "$nroGrupo\-$sorteoResponse{$nroGrupo}[0] S ($sorteoResponse{$nroGrupo}[1])\n";
								if ($grabar){
									push(@response,"$nroGrupo\-$sorteoResponse{$nroGrupo}[0] S ($sorteoResponse{$nroGrupo}[1])\n");
								}
							}
							if($licitacionResponse{$nroGrupo}){
								print "$nroGrupo\-$licitacionResponse{$nroGrupo}[0] L ($licitacionResponse{$nroGrupo}[1])\n";
								if ($grabar){
									push(@response,"$nroGrupo\-$sorteoResponse{$nroGrupo}[0] S ($sorteoResponse{$nroGrupo}[1])\n");
								}
							}
						}	
					}
				}
			}
		}
	}

}

sub usage{
	print << "NL";

        syntax:
                --a -ayuda	imprime este texto de ayuda

                -g 			escribe el resultado de la consulta en un archivo luego de realizada una consulta, en caso de no indicar este comando el resultado de la consulta se mostrara por pantalla
                       		perl DeterminarGanadores -r <id_sorteo> -g

                -r 			Resultado Genral del Sorteo, puede realizar una consulta especificando id de sorteo, debe especificar obligatoriemente un id de sorteo para la consulta
                       		perl DeterminarGanadores -r <id_sorteo>

                -s 			Ganadores por Sorteo, puedo consultar los ganadores por sorteo para un grupo, todos los grupos, un rango de grupos o varios grupos, debe especificar obligatoriemente un id de sorteo para la consulta
                			perl DeterminarGanadores -s <id_sorteo> --grupo all
                			perl DeterminarGanadores -s <id_sorteo> --grupo <nro_grupo>-<nro_grupo>
                			perl DeterminarGanadores -s <id_sorteo> --grupo <nro_grupo>,<nro_grupo>,...
                			perl DeterminarGanadores -s <id_sorteo> --grupo <nro_grupo>

                -l 			Ganadores por Licitación, puedo consultar los ganadores por licitación para un grupo, todos los grupos, un rango de grupos o varios grupos, debe especificar obligatoriemente un id de sorteo para la consulta
                			perl DeterminarGanadores -l <id_sorteo> --grupo all
                			perl DeterminarGanadores -l <id_sorteo> --grupo <nro_grupo>-<nro_grupo>
                			perl DeterminarGanadores -l <id_sorteo> --grupo <nro_grupo>,<nro_grupo>,...
                			perl DeterminarGanadores -l <id_sorteo> --grupo <nro_grupo>

                -p 			Resultados por Grupo, se muestra los resultados de los ganadores para un grupo, todos los grupos, un rango de grupos o varios grupos, debe especificar obligatoriemente un id de sorteo para la consulta
                			perl DeterminarGanadores -p <id_sorteo> --grupo all
                			perl DeterminarGanadores -p <id_sorteo> --grupo <nro_grupo>-<nro_grupo>
                			perl DeterminarGanadores -p <id_sorteo> --grupo <nro_grupo>,<nro_grupo>,...
                			perl DeterminarGanadores -p <id_sorteo> --grupo <nro_grupo>

                --exit 		salir de la ejecucion


       example: $0 -r 3402 -g
                $0 -s 3402 --grupo 8884-8900
                $0 -l 3402 --grupo 8884,8900
                $0 -p 3402 --grupo all

NL
}

