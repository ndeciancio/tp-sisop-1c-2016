#!/bin/bash

ARCH_FECHAS_ADJUDICACION="FechasAdj.csv"
ARCH_PADRON="temaL_padron.csv"
ARCH_GRUPOS="grupos.csv"
#RUTA_REGS_PROCESADOS=
#RUTA_ARCH_ACEPTADOS=
#RUTA_REGS_RECHAZADOS=
#RUTA_REGS_VALIDOS=

# Me aseguro que no se corran más de 1 vez el proceso en simultáneo
cant_procesos=$(pgrep -c "ProcesarOfertas")
if [ $cant_procesos -gt 1 ]
then
	exit
fi

IFS='
'
# Del padron, solo me interesa quedarme con el grupo y el número de orden y concatenarlos para formar el contrato_fusionado
contratos_fusionados=$(cut -c1-4,6-8 ${MAEDIR}/${ARCH_PADRON})

# De ${ARCH_GRUPOS}, me interesan los que están en estado ABIERTO o NUEVO (es decir, todos los que son NO CERRADOS, -v invierte comportamiento)
nuevos_o_abiertos=$(grep -v "^[0-9]\{1,4\};CERRADO;[^;]*;[^;]*;[^;]*;[^;]*" ${MAEDIR}/${ARCH_GRUPOS})

# Ver si no conviene validar ABIERTO y CERRADO por separado para diferenciarlos en el LOG.
#abiertos=$(grep "^[0-9]\{1,4\};ABIERTO;[^;]*;[^;]*;[^;]*;[^;]*" MAEDIR/${ARCH_GRUPOS})
#nuevos=$(grep "^[0-9]\{1,4\};NUEVO;[^;]*;[^;]*;[^;]*;[^;]*" MAEDIR/${ARCH_GRUPOS})

# Localizo la proxima fecha de adjudicacion
# Se presupone como hipótesis que las fechas vienen ordenadas cronológicamente
while read -r fechas
do
	fechas=$(echo $fechas | cut -f1 -d';')
	fechas=$(echo $fechas | sed 's-\([0-3][0-9]\)/\([0-1][0-9]\)/\([0-9]\{4\}\)-\3\2\1-')
	if [ `date +%Y%m%d` -lt $fechas ]
	then
		fecha_adj=$fechas
		break
	fi
done < ${MAEDIR}/${ARCH_FECHAS_ADJUDICACION}

# -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Pendiente: Los archivos deben procesarse en orden cronológico (es por fecha, no por número de concesionario), corregir el for.
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
lista_archivos=$(ls ${OKDIR})
IFS=' '
cant_archivos=$(echo $lista_archivos | wc -l)

${BINDIR}/GrabarBitacora "ProcesarOfertas" "Inicio de ProcesarOfertas" "INFO"
${BINDIR}/GrabarBitacora "ProcesarOfertas" "Cantidad de archivos a procesar: $cant_archivos" "INFO"

IFS='
'

for archivo in $lista_archivos
do
	cant_reg_leidos=0
	cant_ofertas_validas=0
	cant_ofertas_rechazadas=0
	# Verifico que el archivo no este duplicado contra PROCDIR/procesados
	exito=$(find "${PROCDIR}/procesadas/" -type f -name "$archivo" | wc -l)
	if [ $exito -ne 0 ]
	then
		#echo -e "\e[1;31m     Se rechaza el archivo por estar duplicado \e[0m"
		${BINDIR}/GrabarBitacora "ProcesarOfertas" "Se rechaza el archivo $archivo por estar duplicado." "ERR"
		${BINDIR}/MoverArchivos ${OKDIR}/${archivo} ${NOKDIR} ProcesarOfertas
	else
		# Verifico la cantidad de campos del primer registro
		read linea_archivo < ${OKDIR}/$archivo
		echo $linea_archivo | grep -q "^[0-9]\{7\};[0-9].*$"
		# Verifico si la linea tiene el formato esperado. Si el formato es aceptado, grep retorna 0; Si el formato está mal, grep retorna 1.
		exito=$?
		if [ $exito -ne 0 ]
		then
			#echo -e "\e[1;31m     Se rechaza el archivo porque su estructura no se corresponde con el formato esperado \e[0m"
			${BINDIR}/GrabarBitacora "ProcesarOfertas" "Se rechaza el archivo $archivo porque su estructura no se corresponde con el formato esperado." "ERR"
			${BINDIR}/MoverArchivos ${OKDIR}/${archivo} ${NOKDIR} ProcesarOfertas
		else
			#echo -e "\e[1;34m     Archivo a procesar: $archivo \e[0m"
			${BINDIR}/GrabarBitacora "ProcesarOfertas" "Archivo a procesar: $archivo." "INFO"
			usuario=$(whoami)
			concesionario=$(echo $archivo | sed "s/^\([^;]*\)_[^;]*$/\1/")
			fecha_archivo=$(echo $archivo | sed "s/^[^;]*_\([^;]*\)\.[^;]*\.[^;]*$/\1/")
			fecha_actual=$(date +"%Y%m%d_%T")

			# Verificar Ofertas Validas
			while read -r linea_archivo
			do
				let cant_reg_leidos=cant_reg_leidos+1
				# Borro el retorno de carro que esta al final de cada linea
				linea_archivo=$(echo $linea_archivo | sed 's/\r//')
				contrato_fusionado=$(echo $linea_archivo | cut -c1-7)
				IFS=' '
				echo $contratos_fusionados | grep -q "^$contrato_fusionado$"
				resultado=$?
				if [ $resultado -eq 0 ]
				then
					# contrato_fusionado valido. Hay que validar que esté en abierto o nuevo
					grupo=$(echo $linea_archivo | cut -c1-4)
					orden=$(echo $linea_archivo | cut -c5-7)
					importe_ofrecido=$(echo $linea_archivo | sed "s/^[^;]*;\([^;]*\)$/\1/")

					# Reemplazo coma decimal por PUNTO decimal
					importe_ofrecido=$(echo $importe_ofrecido | sed 's/\,/\./')

					linea_val=$(echo $nuevos_o_abiertos | grep "^$grupo;[^;]*;[^;]*;[^;]*;[^;]*;[^;]*$")
					hay_resultados=$?
					if [ $hay_resultados -ne 0 ]
					then
						#echo -e "\e[1;34m Rechazado. Contrato no encontrado. \e[0m"
						let cant_ofertas_rechazadas=cant_ofertas_rechazadas+1
						echo "$archivo;Contrato no encontrado;$linea_archivo;$usuario;$fecha_actual" >> ${PROCDIR}/rechazadas/$concesionario.rech
					else
						# El Contrato fue Encontrado

						cuota_pura=$(echo $linea_val | sed "s/^[^;]*;[^;]*;[^;]*;\([^;]*\);[^;]*;[^;]*$/\1/")
						cuotas_pendientes=$(echo $linea_val | sed "s/^[^;]*;[^;]*;[^;]*;[^;]*;\([^;]*\);[^;]*$/\1/")
						cuotas_para_licitar=$(echo $linea_val | sed "s/^[^;]*;[^;]*;[^;]*;[^;]*;[^;]*;\([^;]*\)$/\1/")

						#Reemplazo la coma por el punto en el monto
						valor_cuota=$(echo $cuota_pura | sed 's/\,/\./')

						valor_minimo_licitacion=$(echo $valor_cuota \* $cuotas_para_licitar | bc)
						valor_maximo_licitacion=$(echo $valor_cuota \* $cuotas_pendientes | bc)


						# Se valida el monto ofrecido

						monto_debajo=$(echo "$importe_ofrecido < $valor_minimo_licitacion" | bc)
						if [ $monto_debajo -eq 1 ]
						then
							#echo -e "\e[1;34m Rechazado. No alcanza el monto mínimo.  \e[0m"
							let cant_ofertas_rechazadas=cant_ofertas_rechazadas+1
							echo "$archivo;No alcanza monto mínimo;$linea_archivo;$usuario;$fecha_actual" >> ${PROCDIR}/rechazadas/$concesionario.rech
						else
							monto_encima=$(echo "$importe_ofrecido > $valor_maximo_licitacion" | bc)
							if [ $monto_encima -eq 1 ]
							then
								#echo -e "\e[1;34m Rechazado. Supera el monto máximo.  \e[0m"
								let cant_ofertas_rechazadas=cant_ofertas_rechazadas+1
								echo "$archivo;Supera el monto máximo;$linea_archivo;$usuario;$fecha_actual" >> ${PROCDIR}/rechazadas/$concesionario.rech
							else
								# Supero validaciones de monto
								# Se valida que el FLAG participa

								linea_padron=$(grep -a "^$grupo;$orden;[^;]*;[^;]*;[^;]*;[^;]*;[^;]*;[^;]*;[^;]*;[^;]*;[^;]*;[^;]*;[^;]*$" ${MAEDIR}/${ARCH_PADRON})
								flag_participa=$(echo $linea_padron | cut -f6 -d';')
								nombre_suscriptor=$(echo $linea_padron | cut -f3 -d';')

								# Se rechazan los registros que tengan un caracter no imprimible en el flag
								if [ -z ${flag_participa} ]
								then
									#echo -e "\e[1;34m Rechazado. Suscriptor no puede participar.  \e[0m"
									let cant_ofertas_rechazadas=cant_ofertas_rechazadas+1
									echo "$archivo;Suscriptor no puede participar;$linea_archivo;$usuario;$fecha_actual" >> ${PROCDIR}/rechazadas/$concesionario.rech
								else
									if [ $flag_participa -eq 1 ] || [ $flag_participa -eq 2 ]
									then
										# Supero validación de flag de participacion
										let cant_ofertas_validas=cant_ofertas_validas+1
										echo "$concesionario;$fecha_archivo;$contrato_fusionado;$grupo;$orden;$importe_ofrecido;$nombre_suscriptor;$usuario;$fecha_actual" >> ${PROCDIR}/validas/$fecha_adj.txt
									else
										#echo -e "\e[1;34m Rechazado. Suscriptor no puede participar.  \e[0m"
										let cant_ofertas_rechazadas=cant_ofertas_rechazadas+1
										echo "$archivo;Suscriptor no puede participar;$linea_archivo;$usuario;$fecha_actual" >> ${PROCDIR}/rechazadas/$concesionario.rech
									fi
								fi
							fi
						fi
					fi
				fi
			done < ${OKDIR}/$archivo
			${BINDIR}/GrabarBitacora "ProcesarOfertas" "Registros leídos = $cant_reg_leidos. Cantidad de ofertas válidas = $cant_ofertas_validas. Cantidad de ofertas rechazadas = $cant_ofertas_rechazadas." "INFO"
			# Un archivo que pudo ser procesado correctamente debe moverse a procesados
			${BINDIR}/MoverArchivos ${OKDIR}/${archivo} ${PROCDIR}/procesadas ProcesarOfertas
		fi
	fi
done

$BINDIR/GrabarBitacora "ProcesarOfertas" "Fin de ProcesarOfertas" "INFO"
